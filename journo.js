// Generated by CoffeeScript 1.5.0-pre
(function() {
  var Highlight, Journo, allPosts, compareManifest, config, emptyManifest, fatal, fs, ftp, knox, loadConfig, loadManifest, manifest, manifestPath, marked, path, postPath, postUrl, s3, siteUrl, skeleton, writeManifest, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Journo = module.exports = {};

  marked = require('marked');

  _ = require('underscore');

  skeleton = null;

  Journo.render = function(source) {
    var content, lexed, markdown, title;
    skeleton || (skeleton = _.template(fs.readFileSync('skeleton.html').toString()));
    markdown = source = _.template(source.toString())({});
    lexed = marked.lexer(markdown);
    title = _.find(lexed, function(token) {
      return token.type === 'heading';
    });
    content = marked.parser(lexed);
    return skeleton({
      title: title,
      content: content
    });
  };

  fs = require('fs');

  path = require('path');

  ftp = config = siteUrl = manifest = null;

  Journo.publish = function() {
    var FTPClient, post, todo, _i, _j, _len, _len1, _ref, _ref1;
    FTPClient = require('ftp');
    ftp = new FTPClient;
    Journo.build();
    todo = compareManifest(allPosts());
    ftp.connect(config.ftp);
    Journo.publishPage;
    _ref = todo.puts;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      post = _ref[_i];
      Journo.publishPost(post);
    }
    _ref1 = todo.deletes;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      post = _ref1[_j];
      Journo.unpublishPost(post);
    }
    ftp.end();
    writeManifest();
    return true;
  };

  Journo.build = function() {
    var html, markdown, post, _i, _len, _ref, _results;
    loadConfig();
    loadManifest();
    if (!fs.existsSync('site')) {
      fs.mkdirSync('site');
    }
    _ref = allPosts();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      post = _ref[_i];
      markdown = fs.readFileSync(postPath(post));
      html = Journo.render(markdown);
      _results.push(fs.writeFileSync("site/" + (path.basename(post, '.md')) + ".html", html));
    }
    return _results;
  };

  loadConfig = function() {
    if (config) {
      return;
    }
    try {
      config = JSON.parse(fs.readFileSync('config.json'));
    } catch (err) {
      fatal("Unable to read config.json");
    }
    return siteUrl = config.url.replace(/\/$/, '');
  };

  postPath = function(post) {
    return "posts/" + post;
  };

  postUrl = function(post) {
    return "" + siteUrl + "/" + post;
  };

  allPosts = function() {
    return fs.readdirSync('posts');
  };

  fatal = function(message) {
    console.error(message);
    return process.exit(1);
  };

  Journo.FTP = {};

  Journo.FTP.publishPost = function(post) {
    throw 'TK';
  };

  Journo.FTP.unpublishPost = function(post) {
    throw 'TK';
  };

  Journo.S3 = {};

  knox = require('knox');

  s3 = null;

  Journo.S3.connect = function() {
    loadConfig();
    return s3 || (s3 = knox.createClient(config.s3));
  };

  Journo.S3.publishPost = function(post) {
    var client, request;
    client = Journo.S3.connect();
    throw 'content TK';
    request = client.put(path.join(config.s3.path, post), {
      'Content-Length': content.length,
      'Content-Type': 'text/html',
      'x-amz-acl': 'public-read'
    });
    request.on('response', function(response) {
      if (response.statusCode === 200) {
        return console.log("PUT " + post);
      }
    });
    return request.end(content);
  };

  manifestPath = 'journo-manifest.json';

  emptyManifest = {
    posts: {},
    published: null
  };

  loadManifest = function() {
    return manifest = fs.existsSync(manifestPath) ? JSON.parse(fs.readFileSync(manifestPath)) : emptyManifest;
  };

  writeManifest = function() {
    return fs.writeFileSync(manifestPath, JSON.stringify(manifest));
  };

  compareManifest = function(posts) {
    var deletes, entry, file, meta, puts, stat, _i, _len;
    puts = [];
    deletes = [];
    for (file in manifest) {
      meta = manifest[file];
      if (__indexOf.call(posts, file) < 0) {
        deletes.push(file);
      }
    }
    for (_i = 0, _len = posts.length; _i < _len; _i++) {
      file = posts[_i];
      stat = fs.statSync("posts/" + file);
      entry = manifest[file];
      if (!entry || entry.mtime !== stat.mtime) {
        entry || (entry = {
          pubtime: new Date
        });
        entry.mtime = stat.mtime;
        puts.push(file);
        manifest[file] = entry;
      }
    }
    return {
      puts: puts,
      deletes: deletes
    };
  };

  Highlight = require('highlight').Highlight;

  marked.setOptions({
    highlight: function(code, lang) {
      return Highlight(code);
    }
  });

  Journo.feed = function() {
    var RSS, content, description, feed, lexed, post, sorted, title, _i, _len, _ref;
    RSS = require('rss');
    loadConfig();
    feed = new RSS({
      title: config.title,
      description: config.description,
      feed_url: "" + siteUrl + "/rss.xml",
      site_url: siteUrl,
      author: config.author
    });
    sorted = _.sortBy(_.keys(manifest), function(post) {
      return manifest[post].pubtime;
    });
    _ref = sorted.slice(0, 20);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      post = _ref[_i];
      content = fs.readFileSync(postPath(post));
      lexed = marked.lexer(content);
      title = _.find(lexed, function(token) {
        return token.type === 'heading';
      });
      description = _.find(lexed, function(token) {
        return token.type === 'paragraph';
      });
      feed.item({
        title: title,
        description: description,
        url: postUrl(post),
        date: manifest[post].pubtime
      });
    }
    return feed.xml();
  };

  Journo.init = function() {
    var bootstrap, here;
    here = fs.realpathSync('.');
    if (fs.existsSync('posts')) {
      return console.error("A blog already exists in " + here);
    }
    bootstrap = path.join(__dirname, 'bootstrap');
    return require('ncp').ncp(bootstrap, '.', function(err) {
      if (err) {
        return console.error(err);
      }
      return console.log("Initialized new blog in " + here);
    });
  };

  Journo.preview = function() {
    var http, mime, server, url, util;
    http = require('http');
    mime = require('mime');
    url = require('url');
    util = require('util');
    server = http.createServer(function(req, res) {
      var publicPath;
      path = url.parse(req.url).pathname.replace(/^\//, '');
      publicPath = "public/" + path;
      return fs.exists(publicPath, function(exists) {
        var post;
        if (exists) {
          res.writeHead(200, {
            'Content-Type': mime.lookup(publicPath)
          });
          return fs.createReadStream(publicPath).pipe(res);
        } else {
          post = "posts/" + path + ".md";
          return fs.exists(post, function(exists) {
            if (exists) {
              return fs.readFile(post, function(err, content) {
                res.writeHead(200, {
                  'Content-Type': 'text/html'
                });
                return res.end(Journo.render(content));
              });
            } else {
              res.writeHead(404);
              return res.end('404 Not Found');
            }
          });
        }
      });
    });
    server.listen(1234);
    return console.log("Journo is previewing at http://localhost:1234");
  };

  Journo.run = function() {
    var args, command;
    args = process.argv.slice(2);
    command = args[0] || 'preview';
    if (Journo[command]) {
      return Journo[command]();
    } else {
      return console.error("Journo doesn't know how to '" + command + "'");
    }
  };

}).call(this);
