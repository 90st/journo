// Generated by CoffeeScript 1.5.0-pre
(function() {
  var FTPClient, Journo, compareManifest, configuration, emptyManifest, fs, ftp, loadConfiguration, loadManifest, manifest, manifestPath, marked, writeManifest,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Journo = module.exports = {};

  marked = require('marked');

  Journo.markdown = function(source) {
    return marked.parser(marked.lexer(source));
  };

  fs = require('fs');

  FTPClient = require('ftp');

  ftp = new FTPClient;

  configuration = manifest = null;

  Journo.publish = function() {
    var post, posts, todo, _i, _j, _len, _len1, _ref, _ref1;
    configuration = loadConfiguration();
    manifest = loadManifest();
    posts = fs.readdirSync('posts');
    todo = compareManifest(posts);
    ftp.connect(configuration);
    _ref = todo.puts;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      post = _ref[_i];
      Journo.publishPost(post);
    }
    _ref1 = todo.deletes;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      post = _ref1[_j];
      Journo.unpublishPost(post);
    }
    ftp.end();
    writeManifest();
    return true;
  };

  loadConfiguration = function() {
    return JSON.parse(fs.readFileSync('journo.json'));
  };

  Journo.publishPost = function(post) {
    throw 'TK';
  };

  Journo.unpublishPost = function(post) {
    throw 'TK';
  };

  manifestPath = 'journo-manifest.json';

  emptyManifest = {
    posts: {},
    published: null
  };

  loadManifest = function() {
    if (fs.existsSync(manifestPath)) {
      return JSON.parse(fs.readFileSync(manifestPath));
    } else {
      return emptyManifest;
    }
  };

  writeManifest = function() {
    return fs.writeFileSync(manifestPath, JSON.stringify(manifest));
  };

  compareManifest = function(posts) {
    var deletes, entry, file, meta, puts, stat, _i, _len;
    puts = [];
    deletes = [];
    for (file in manifest) {
      meta = manifest[file];
      if (__indexOf.call(posts, file) < 0) {
        deletes.push(file);
      }
    }
    for (_i = 0, _len = posts.length; _i < _len; _i++) {
      file = posts[_i];
      stat = fs.statSync("posts/" + file);
      entry = manifest[file];
      if (!entry || entry.mtime !== stat.mtime) {
        entry || (entry = {
          pubtime: new Date
        });
        entry.mtime = stat.mtime;
        puts.push(file);
        manifest[file] = entry;
      }
    }
    return {
      puts: puts,
      deletes: deletes
    };
  };

}).call(this);
